#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
from aiogram import Bot
from dotenv import load_dotenv

load_dotenv()

async def get_my_id():
    """–ü–æ–ª—É—á–∞–µ–º –≤–∞—à user_id —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    
    token = os.getenv("TGBOT_TOKEN", "")
    if not token:
        print("‚ùå TGBOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        return
    
    print("ü§ñ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ ID...")
    bot = Bot(token)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @{} –≤ Telegram".format(bot_info.username))
        print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start)")
        print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ")
        print("\n‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        @bot.message_handler()
        async def handle_message(message):
            user_id = message.from_user.id
            username = message.from_user.username
            first_name = message.from_user.first_name
            last_name = message.from_user.last_name
            
            print(f"\nüéØ –ü–æ–ª—É—á–µ–Ω user_id!")
            print(f"   ID: {user_id}")
            print(f"   Username: @{username}" if username else "   Username: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print(f"   –ò–º—è: {first_name} {last_name or ''}")
            print(f"\nüìù –û–±–Ω–æ–≤–∏—Ç–µ –≤ .env:")
            print(f"TG_OWNER_ID={user_id}")
            
            await message.reply(f"–í–∞—à user_id: {user_id}")
            await bot.stop_polling()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.polling(timeout=60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(get_my_id())
