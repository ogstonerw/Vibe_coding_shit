#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import logging
from bitget_integration import BitgetTrader
from market.watcher import Watcher
from trader.executor import Executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_get_price():
    """–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not hasattr(test_get_price, 'price'):
        test_get_price.price = 30000.0
    test_get_price.price += 50.0
    return test_get_price.price

def test_on_breakeven(plan):
    """Callback –¥–ª—è –±–µ–∑—É–±—ã—Ç–∫–∞"""
    print(f"üéØ –°—Ä–∞–±–æ—Ç–∞–ª –±–µ–∑—É–±—ã—Ç–æ–∫ –¥–ª—è –ø–ª–∞–Ω–∞ {plan.get('plan_id')}")
    print(f"   –°–∏–º–≤–æ–ª: {plan.get('symbol')}")
    print(f"   –°—Ç–æ—Ä–æ–Ω–∞: {plan.get('side')}")
    print(f"   –í—Ö–æ–¥: {plan.get('entry')}")
    print(f"   –°—Ç–æ–ø: {plan.get('stop')}")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ Bitget API
    print("üîÅ –ü–µ—Ä–µ–Ω–æ—Å SL ‚Üí –ë–£...")
    print("‚úÖ SL –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –ë–£")

async def test_full_integration():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
    
    # 1. –°–æ–∑–¥–∞–µ–º Bitget —Ç—Ä–µ–π–¥–µ—Ä
    trader = BitgetTrader()
    print("‚úÖ Bitget —Ç—Ä–µ–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω")
    
    # 2. –°–æ–∑–¥–∞–µ–º Executor
    executor = Executor(trader, dry_run=True)
    print("‚úÖ Executor —Å–æ–∑–¥–∞–Ω")
    
    # 3. –°–æ–∑–¥–∞–µ–º Watcher
    watcher = Watcher(
        get_now_price=test_get_price,
        on_breakeven=test_on_breakeven,
        poll_interval_sec=1
    )
    print("‚úÖ Watcher —Å–æ–∑–¥–∞–Ω")
    
    # 4. –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    class TestSignal:
        def __init__(self):
            self.position_type = "LONG"
            self.entry_price = 30000.0
            self.entry_zone = [29950.0, 30050.0]
            self.stop_loss = 29500.0
            self.take_profits = [30500.0, 31000.0, 31500.0]
            self.raw_text = "LONG BTCUSDT @ 30000 SL 29500 TP1 30500 TP2 31000 TP3 31500"
    
    signal = TestSignal()
    
    # 5. –ö–æ–Ω—Ç–µ–∫—Å—Ç
    context = {
        "source": "INTRADAY",
        "equity_sub": 850.0,
        "risk_total_pct": 3.0,
        "risk_leg_pct": 1.5,
        "leverage_min": 10,
        "breakeven_after_tp": 2
    }
    
    print("\nüìä –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:")
    print(f"   –°—Ç–æ—Ä–æ–Ω–∞: {signal.position_type}")
    print(f"   –í—Ö–æ–¥: {signal.entry_zone}")
    print(f"   –°—Ç–æ–ø: {signal.stop_loss}")
    print(f"   –¢–µ–π–∫–∏: {signal.take_profits}")
    
    # 6. –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —á–µ—Ä–µ–∑ Executor
    print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ Executor...")
    plan = executor.plan_from_signal(signal, context)
    print(f"‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {plan.symbol} {plan.side} @ {plan.entry_price}")
    
    # 7. –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
    print("\nüîÑ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤...")
    orders, plan_dict = executor.place_all(plan)
    print(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–æ {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")
    
    # 8. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –≤ Watcher
    print("\nüîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –≤ Watcher...")
    watcher.register_plan(plan_dict)
    print(f"‚úÖ –ü–ª–∞–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {plan_dict.get('plan_id')}")
    
    # 9. –ó–∞–ø—É—Å–∫–∞–µ–º Watcher
    print("\nüîÑ –ó–∞–ø—É—Å–∫ Watcher –Ω–∞ 60 —Å–µ–∫—É–Ω–¥...")
    print("   –û–∂–∏–¥–∞–µ–º: TP1 @ 30500, TP2 @ 31000, –∑–∞—Ç–µ–º –±–µ–∑—É–±—ã—Ç–æ–∫")
    
    task = asyncio.create_task(watcher.start())
    
    # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(60)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Watcher
    watcher.stop()
    await task
    
    print("\n‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(test_full_integration())
