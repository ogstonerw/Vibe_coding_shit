#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import time
import logging
from market.watcher import Watcher

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_get_price():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã"""
    # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Ç–µ—Ç
    if not hasattr(test_get_price, 'price'):
        test_get_price.price = 30000.0
    test_get_price.price += 50.0
    print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {test_get_price.price}")
    return test_get_price.price

def test_on_breakeven(plan):
    """–¢–µ—Å—Ç–æ–≤—ã–π callback –¥–ª—è –±–µ–∑—É–±—ã—Ç–∫–∞"""
    print(f"üéØ –°—Ä–∞–±–æ—Ç–∞–ª –±–µ–∑—É–±—ã—Ç–æ–∫ –¥–ª—è –ø–ª–∞–Ω–∞ {plan.get('plan_id')}")
    print(f"   –°–∏–º–≤–æ–ª: {plan.get('symbol')}")
    print(f"   –°—Ç–æ—Ä–æ–Ω–∞: {plan.get('side')}")
    print(f"   –í—Ö–æ–¥: {plan.get('entry')}")
    print(f"   –°—Ç–æ–ø: {plan.get('stop')}")

async def main():
    print("üß™ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Watcher...")
    
    # –°–æ–∑–¥–∞–µ–º watcher
    watcher = Watcher(
        get_now_price=test_get_price,
        on_breakeven=test_on_breakeven,
        poll_interval_sec=1  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω
    test_plan = {
        'symbol': 'BTCUSDT',
        'side': 'LONG',
        'entry': 30000.0,
        'stop': 29500.0,
        'tps': [30500.0, 31000.0, 31500.0],  # TP1, TP2, TP3
        'tp_shares': [0.5, 0.3, 0.2],
        'breakeven_after_tp': 2  # –ü–æ—Å–ª–µ 2-–≥–æ TP –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –ë–£
    }
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
    watcher.register_plan(test_plan)
    
    print(f"üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–ª–∞–Ω: {test_plan}")
    print("üîÑ –ó–∞–ø—É—Å–∫ watcher –Ω–∞ 60 —Å–µ–∫—É–Ω–¥...")
    print("   –û–∂–∏–¥–∞–µ–º: TP1 @ 30500, TP2 @ 31000, –∑–∞—Ç–µ–º –±–µ–∑—É–±—ã—Ç–æ–∫")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º watcher
    task = asyncio.create_task(watcher.start())
    
    # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(60)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º watcher
    watcher.stop()
    await task
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
