#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import logging
from bitget_integration import BitgetTrader
from market.watcher import Watcher

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_get_price():
    """–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not hasattr(test_get_price, 'price'):
        test_get_price.price = 30000.0
    test_get_price.price += 50.0
    return test_get_price.price

def test_on_breakeven(plan):
    """Callback –¥–ª—è –±–µ–∑—É–±—ã—Ç–∫–∞"""
    print(f"üéØ –°—Ä–∞–±–æ—Ç–∞–ª –±–µ–∑—É–±—ã—Ç–æ–∫ –¥–ª—è –ø–ª–∞–Ω–∞ {plan.get('plan_id')}")
    print(f"   –°–∏–º–≤–æ–ª: {plan.get('symbol')}")
    print(f"   –°—Ç–æ—Ä–æ–Ω–∞: {plan.get('side')}")
    print(f"   –í—Ö–æ–¥: {plan.get('entry')}")
    print(f"   –°—Ç–æ–ø: {plan.get('stop')}")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ Bitget API
    print("üîÅ –ü–µ—Ä–µ–Ω–æ—Å SL ‚Üí –ë–£...")
    print("‚úÖ SL –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –ë–£")

async def test_simple_integration():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üß™ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
    
    # 1. –°–æ–∑–¥–∞–µ–º Bitget —Ç—Ä–µ–π–¥–µ—Ä
    trader = BitgetTrader()
    print("‚úÖ Bitget —Ç—Ä–µ–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω")
    
    # 2. –°–æ–∑–¥–∞–µ–º Watcher
    watcher = Watcher(
        get_now_price=test_get_price,
        on_breakeven=test_on_breakeven,
        poll_interval_sec=1
    )
    print("‚úÖ Watcher —Å–æ–∑–¥–∞–Ω")
    
    # 3. –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω (–∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç Executor)
    plan_dict = {
        'symbol': 'BTCUSDT',
        'side': 'LONG',
        'entry': 30000.0,
        'stop': 29500.0,
        'tps': [30500.0, 31000.0, 31500.0],
        'tp_shares': [0.5, 0.3, 0.2],
        'breakeven_after_tp': 2,
        'qty_total': 0.1
    }
    
    print("\nüìä –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω:")
    print(f"   –°–∏–º–≤–æ–ª: {plan_dict['symbol']}")
    print(f"   –°—Ç–æ—Ä–æ–Ω–∞: {plan_dict['side']}")
    print(f"   –í—Ö–æ–¥: {plan_dict['entry']}")
    print(f"   –°—Ç–æ–ø: {plan_dict['stop']}")
    print(f"   –¢–µ–π–∫–∏: {plan_dict['tps']}")
    print(f"   –î–æ–ª–∏ TP: {plan_dict['tp_shares']}")
    
    # 4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –≤ Watcher
    print("\nüîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –≤ Watcher...")
    watcher.register_plan(plan_dict)
    print(f"‚úÖ –ü–ª–∞–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {plan_dict.get('plan_id')}")
    
    # 5. –ó–∞–ø—É—Å–∫–∞–µ–º Watcher
    print("\nüîÑ –ó–∞–ø—É—Å–∫ Watcher –Ω–∞ 60 —Å–µ–∫—É–Ω–¥...")
    print("   –û–∂–∏–¥–∞–µ–º: TP1 @ 30500, TP2 @ 31000, –∑–∞—Ç–µ–º –±–µ–∑—É–±—ã—Ç–æ–∫")
    
    task = asyncio.create_task(watcher.start())
    
    # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(60)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º watcher
    watcher.stop()
    await task
    
    print("\n‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(test_simple_integration())
