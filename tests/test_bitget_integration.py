#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
from bitget_integration import BitgetTrader, load_bitget_config

def test_dry_run():
    """–¢–µ—Å—Ç DRY_RUN —Ä–µ–∂–∏–º–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bitget –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ DRY_RUN —Ä–µ–∂–∏–º–µ...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä
    trader = BitgetTrader()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    class TestSignal:
        def __init__(self):
            self.position_type = "LONG"
            self.entry_price = 30000.0
            self.entry_zone = [29950.0, 30050.0]
            self.stop_loss = 29500.0
            self.take_profits = [30500.0, 31000.0, 31500.0]
    
    signal = TestSignal()
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç
    context = {
        "source": "INTRADAY",
        "equity_sub": 850.0,  # 85% –æ—Ç 1000
        "risk_total_pct": 3.0,
        "risk_leg_pct": 1.5,
        "leverage_min": 10,
        "leverage_max": 20,
        "breakeven_after_tp": 2,
        "qty_total": 0.1,  # —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
        "tp_shares": [0.5, 0.3, 0.2]
    }
    
    print("üìä –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:")
    print(f"   –°—Ç–æ—Ä–æ–Ω–∞: {signal.position_type}")
    print(f"   –í—Ö–æ–¥: {signal.entry_zone}")
    print(f"   –°—Ç–æ–ø: {signal.stop_loss}")
    print(f"   –¢–µ–π–∫–∏: {signal.take_profits}")
    print(f"   –†–∞–∑–º–µ—Ä: {context['qty_total']}")
    print(f"   –î–æ–ª–∏ TP: {context['tp_shares']}")
    
    print("\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
    result = trader.execute_trade(signal, context)
    
    if result:
        print("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏")

def test_real_api():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–ª—é—á–∏)"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API...")
    
    config = load_bitget_config()
    if not config:
        print("‚ö†Ô∏è –ö–ª—é—á–∏ Bitget –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API")
        return
    
    print("‚úÖ –ö–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ API...")
    
    trader = BitgetTrader(config)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
    try:
        spec = trader.fetch_contract_specs()
        print(f"‚úÖ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: price_step={spec.price_step}, size_step={spec.size_step}, min_size={spec.min_size}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {e}")

if __name__ == "__main__":
    # –¢–µ—Å—Ç DRY_RUN
    test_dry_run()
    
    # –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
    test_real_api()
