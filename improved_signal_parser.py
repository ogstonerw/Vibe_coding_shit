#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import re
from dataclasses import dataclass
from typing import Optional, List, Dict

@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    message_id: str
    channel_name: str
    position_type: str  # 'LONG' –∏–ª–∏ 'SHORT'
    entry_price: Optional[str] = None
    stop_loss: Optional[str] = None
    take_profits: List[str] = None
    risk_percent: Optional[str] = None
    leverage: Optional[str] = None
    timestamp: Optional[str] = None
    raw_text: str = ""

class ImprovedSignalParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ª–æ–Ω–≥–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        self.long_keywords = [
            '–ª–æ–Ω–≥', 'long', 'üìà', '–≤–≤–µ—Ä—Ö', '—Ä–æ—Å—Ç', '–ø–æ–∫—É–ø–∫–∞', 'buy',
            '–ªo–Ω–≥', '–≤—Ö–æ–¥ –≤ –ª–æ–Ω–≥', '–ø—Ä–æ–±—É—é –ª–æ–Ω–≥', '–æ—Ç–∫—Ä—ã–≤–∞—é –ª–æ–Ω–≥'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —à–æ—Ä—Ç–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        self.short_keywords = [
            '—à–æ—Ä—Ç', 'short', 'üî¥', '–≤–Ω–∏–∑', '–ø–∞–¥–µ–Ω–∏–µ', '–ø—Ä–æ–¥–∞–∂–∞', 'sell',
            '—ào—Ä—Ç', '–≤—Ö–æ–¥ –≤ —à–æ—Ä—Ç', '–ø—Ä–æ–±—É—é —à–æ—Ä—Ç', '–æ—Ç–∫—Ä—ã–≤–∞—é —à–æ—Ä—Ç'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —à—É–º–∞ (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        self.noise_keywords = [
            '—Å—Ç—Ä–∏–º', '—Å—Ç—Ä–∏–º–∏—Ç', 'twitch', 'youtube', '–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å',
            '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–º–æ', '–∫–æ–Ω–∫—É—Ä—Å', '–ø—Ä–∏–∑', '–∞–Ω–æ–Ω—Å'
        ]
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        self.improved_phrases = [
            '–ø—Ä–æ–±—É—é –ª–æ–Ω–≥', '–ø—Ä–æ–±—É—é —à–æ—Ä—Ç', '—Å—Ç–æ–ø –ø–æ–¥', '—Å—Ç–æ–ø –Ω–∞–¥',
            '—Ü–µ–ª–∏:', '—Ä–∏—Å–∫:', '–ø–ª–µ—á–æ:', '—Ö5', '—Ö10', '—Ö20'
        ]
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.patterns = {
            'entry': [
                r'–ø—Ä–æ–±—É—é\s+(?:–ª–æ–Ω–≥|—à–æ—Ä—Ç|–ªo–Ω–≥|—ào—Ä—Ç)\s+(\d{4,6}[-\d{4,6}}]*)',
                r'–≤—Ö–æ–¥\s+(?:–≤\s+)?(?:–ª–æ–Ω–≥|—à–æ—Ä—Ç|–ªo–Ω–≥|—ào—Ä—Ç)\s+(\d{4,6}[-\d{4,6}}]*)',
                r'(\d{4,6}[-\d{4,6}}]*)\s+(?:–ª–æ–Ω–≥|—à–æ—Ä—Ç|–ªo–Ω–≥|—ào—Ä—Ç)',
                r'(?:–ª–æ–Ω–≥|—à–æ—Ä—Ç|–ªo–Ω–≥|—ào—Ä—Ç)\s+(\d{4,6}[-\d{4,6}}]*)'
            ],
            'stop': [
                r'—Å—Ç–æ–ø\s+(?:–ø–æ–¥|–Ω–∞–¥)\s+(\d{4,6})',
                r'—Å—Ç–æ–ø\s+(\d{4,6})',
                r'—Å–ª\s+(\d{4,6})',
                r'—Å—Ço–ø\s+(?:–ø–æ–¥|–Ω–∞–¥)\s+(\d{4,6})'
            ],
            'take_profit': [
                r'—Ü–µ–ª–∏?:\s*([\d\s\-\n]+)',
                r'—Ç–µ–π–∫\s+(?:–ø—Ä–æ—Ñ–∏—Ç|—Ü–µ–ª–∏)\s*([\d\s\-\n]+)',
                r'—Ç–ø\s*([\d\s\-\n]+)',
                r'—Ü–µ–ª–∏\s*([\d\s\-\n]+)'
            ],
            'risk': [
                r'—Ä–∏—Å–∫(?:–æ–º)?\s+(\d+(?:\.\d+)?%)',
                r'(\d+(?:\.\d+)?%)\s+—Ä–∏—Å–∫',
                r'—Ä–∏—Å–∫o–º\s+(\d+(?:\.\d+)?%)'
            ],
            'leverage': [
                r'–ø–ª–µ—á–æ:?\s*(—Ö\d+)',
                r'(—Ö\d+)\s+–ø–ª–µ—á–æ',
                r'–ª–µ–≤–µ—Ä–∏–¥–∂\s*(—Ö\d+)',
                r'–ø–ª–µ—áo:?\s*(—Ö\d+)'
            ]
        }
    
    def is_trading_signal(self, text: str) -> tuple[bool, "Optional[str]"]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (is_signal, reason). reason ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–∏—á–Ω–æ–π –æ—Ç–∫–∞–∑–∞
        –∏–ª–∏ None.
        """
        text_lower = text.lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        has_signal_keywords = any(
            keyword in text_lower
            for keyword in self.long_keywords + self.short_keywords
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä (—Ü–µ–Ω) - –±–æ–ª–µ–µ –≥–∏–±–∫–æ
        has_numbers = bool(re.search(r'\d{3,6}', text))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        is_long_enough = len(text.strip()) > 20

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —è–≤–Ω–æ–≥–æ —à—É–º–∞
        has_noise = any(
            keyword in text_lower
            for keyword in self.noise_keywords
        )

        if has_noise:
            return False, "noise"

        if not has_signal_keywords:
            return False, "no keywords"

        if not has_numbers:
            return False, "no numbers"

        if not is_long_enough:
            return False, "too short"

        # Passed basic checks
        return True, None
    
    def extract_position_type(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏ (LONG/SHORT)"""
        text_lower = text.lower()
        
        if any(keyword in text_lower for keyword in self.long_keywords):
            return 'LONG'
        elif any(keyword in text_lower for keyword in self.short_keywords):
            return 'SHORT'
        
        return None
    
    def extract_parameters(self, text: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        params = {}
        
        for param_type, patterns in self.patterns.items():
            for pattern in patterns:
                match = re.search(pattern, text, re.IGNORECASE | re.MULTILINE)
                if match:
                    if param_type == 'take_profit':
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
                        tp_text = match.group(1)
                        tp_prices = re.findall(r'\d{4,6}', tp_text)
                        if tp_prices:
                            params[param_type] = '-'.join(tp_prices)
                    else:
                        params[param_type] = match.group(1)
                    break
        
        return params
    
    def parse_signal(self, message_id: str, channel_name: str, text: str, timestamp: str = None) -> Optional[TradingSignal]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        is_sig, reason = self.is_trading_signal(text)
        if not is_sig:
            return None

        position_type = self.extract_position_type(text)
        if not position_type:
            return None
        
        params = self.extract_parameters(text)
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º take_profits –Ω–∞ —Å–ø–∏—Å–æ–∫
        take_profits = []
        if 'take_profit' in params:
            tp_str = params['take_profit']
            take_profits = re.findall(r'\d{4,6}', tp_str)
        
        return TradingSignal(
            message_id=message_id,
            channel_name=channel_name,
            position_type=position_type,
            entry_price=params.get('entry'),
            stop_loss=params.get('stop'),
            take_profits=take_profits,
            risk_percent=params.get('risk'),
            leverage=params.get('leverage'),
            timestamp=timestamp,
            raw_text=text
        )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:
# –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: 548
# –°–∏–≥–Ω–∞–ª–æ–≤: 142
# –®—É–º–∞: 406
# –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: 1
