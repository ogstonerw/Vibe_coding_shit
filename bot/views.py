# bot/views.py
from typing import Dict, Any, List
from datetime import datetime

def format_positions_list(position: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞"""
    symbol = position.get('symbol', 'N/A')
    side = position.get('side', 'N/A')
    state = position.get('state', 'N/A')
    created_at = position.get('created_at', '')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    try:
        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
        date_str = dt.strftime('%d.%m %H:%M')
    except:
        date_str = created_at[:16]
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã
    side_emoji = "üü¢" if side == "BUY" else "üî¥"
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_emoji = {
        'PENDING_SETUP': '‚è≥',
        'LEG1_PLACED': 'üìù',
        'LEG1_FILLED': '‚úÖ',
        'TP1_HIT': 'üéØ',
        'TP2_HIT': 'üéØ',
        'BREAKEVEN': '‚öñÔ∏è',
        'CLOSED': 'üîí',
        'CANCELLED': '‚ùå',
        'STOPPED_OUT': 'üõë'
    }.get(state, '‚ùì')
    
    return f"{side_emoji} {symbol} {side} {state_emoji} {state} | {date_str}"

def format_position_details(position: Dict[str, Any], orders: List[Dict[str, Any]], stats: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏"""
    text = f"""
üìä –î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ #{position.get('id', 'N/A')}

üî∏ –°–∏–º–≤–æ–ª: {position.get('symbol', 'N/A')}
üî∏ –°—Ç–æ—Ä–æ–Ω–∞: {position.get('side', 'N/A')}
üî∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {position.get('state', 'N/A')}
üî∏ –ò—Å—Ç–æ—á–Ω–∏–∫: {position.get('source', 'N/A')}

üí∞ –¶–µ–Ω—ã:
‚Ä¢ –í—Ö–æ–¥: {position.get('entry_low', 0):.2f} - {position.get('entry_high', 0):.2f}
‚Ä¢ –°—Ç–æ–ø: {position.get('stop_price', 0):.2f}

üìà –†–∏—Å–∫:
‚Ä¢ –ù–æ–≥–∞: {position.get('risk_leg_pct', 0):.1f}%
‚Ä¢ –û–±—â–∏–π: {position.get('risk_total_cap_pct', 0):.1f}%
‚Ä¢ –ü–ª–µ—á–æ: {position.get('leverage_min', 0)}x - {position.get('leverage_max', 0)}x

üìÖ –í—Ä–µ–º—è:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: {format_datetime(position.get('created_at', ''))}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {format_datetime(position.get('updated_at', ''))}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä–∞
    if orders:
        text += "\nüìã –û—Ä–¥–µ—Ä–∞:\n"
        for order in orders:
            order_text = format_order(order)
            text += f"‚Ä¢ {order_text}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if stats:
        text += f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:
‚Ä¢ P&L: {stats.get('pnl_usdt', 0):.2f} USDT ({stats.get('pnl_pct', 0):.2f}%)
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í—ã–∏–≥—Ä—ã—à' if stats.get('win', 0) else '‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à'}
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {stats.get('closed_reason', 'N/A')}
"""
    
    return text

def format_order(order: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
    kind = order.get('kind', 'N/A')
    side = order.get('side', 'N/A')
    price = order.get('price', 0)
    qty = order.get('qty', 0)
    status = order.get('status', 'N/A')
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞
    kind_emoji = {
        'ENTRY': 'üì•',
        'TP': 'üéØ',
        'SL': 'üõë'
    }.get(kind, '‚ùì')
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    status_emoji = {
        'NEW': '‚è≥',
        'FILLED': '‚úÖ',
        'CANCELED': '‚ùå'
    }.get(status, '‚ùì')
    
    return f"{kind_emoji} {kind} {side} @ {price:.2f} x {qty:.4f} {status_emoji} {status}"

def format_statistics(stats: Dict[str, Any], recent_performance: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    text = f"""
üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìà –°–¥–µ–ª–∫–∏:
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_trades', 0)}
‚Ä¢ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {stats.get('wins', 0)}
‚Ä¢ –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: {stats.get('losses', 0)}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {stats.get('win_rate', 0):.1f}%

üí∞ P&L:
‚Ä¢ –û–±—â–∏–π: {stats.get('total_pnl', 0):.2f} USDT
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: {stats.get('avg_pnl_pct', 0):.2f}%
‚Ä¢ –í—ã–∏–≥—Ä—ã—à–∏: {stats.get('total_wins', 0):.2f} USDT
‚Ä¢ –ü—Ä–æ–∏–≥—Ä—ã—à–∏: {stats.get('total_losses', 0):.2f} USDT
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
    if recent_performance:
        text += "\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
        for day in recent_performance[:7]:
            date = day.get('date', 'N/A')
            trades = day.get('trades', 0)
            wins = day.get('wins', 0)
            pnl = day.get('daily_pnl', 0)
            
            win_rate = (wins / trades * 100) if trades > 0 else 0
            pnl_emoji = "üü¢" if pnl >= 0 else "üî¥"
            
            text += f"‚Ä¢ {date}: {trades} —Å–¥–µ–ª–æ–∫, {win_rate:.0f}% –≤–∏–Ω—Ä–µ–π—Ç, {pnl_emoji} {pnl:.2f} USDT\n"
    
    return text

def format_datetime(dt_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
        return dt.strftime('%d.%m.%Y %H:%M:%S')
    except:
        return dt_str[:19] if dt_str else 'N/A'

def format_error_message(error: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    return f"‚ùå –û—à–∏–±–∫–∞: {error}"

def format_success_message(message: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
    return f"‚úÖ {message}"

def format_warning_message(message: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    return f"‚ö†Ô∏è {message}"
