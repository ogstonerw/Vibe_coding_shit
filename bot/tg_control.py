# bot/tg_control.py
import os, json
from typing import List, Dict, Any
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command

from dotenv import load_dotenv
load_dotenv()

TGBOT_TOKEN = os.getenv("TGBOT_TOKEN", "")

# Support TG_OWNER_IDS (comma separated) or single TG_OWNER_ID
_owners_raw = os.getenv("TG_OWNER_IDS", os.getenv("TG_OWNER_ID", "")) or ""
def _parse_owner_ids(raw: str):
    ids = []
    for p in raw.split(','):
        p = p.strip()
        if not p:
            continue
        try:
            ids.append(int(p))
        except ValueError:
            # ignore non-integer entries
            continue
    return ids

ALLOWED_USERS = _parse_owner_ids(_owners_raw)



def _load_demo_trades() -> List[Dict[str, Any]]:
    if os.path.exists("demo_trades.json"):
        with open("demo_trades.json","r",encoding="utf-8") as f:
            return json.load(f)
    return []

def _format_trade(tr: Dict[str,Any], idx: int, total: int) -> str:
    return (
        f"<b>–°–¥–µ–ª–∫–∞ {idx+1}/{total}</b>\n"
        f"ID: <code>{tr.get('trade_id')}</code>\n"
        f"–ö–∞–Ω–∞–ª: {tr.get('channel')}\n"
        f"–°–∏–º–≤–æ–ª: {tr.get('symbol')} | –°—Ç–æ—Ä–æ–Ω–∞: {tr.get('side')}\n"
        f"–í—Ö–æ–¥: {tr.get('entry_price')} | SL: {tr.get('stop_loss')} | TP: {tr.get('take_profit')}\n"
        f"–õ–µ–≤–µ—Ä–∏–¥–∂: {tr.get('leverage')} | –†–∏—Å–∫%: {tr.get('risk_percent')}\n"
        f"–°—Ç–∞—Ç—É—Å: {tr.get('status')} | –û—Ç–∫—Ä—ã—Ç–∞: {tr.get('open_time')}\n"
        f"PnL: {tr.get('pnl')} USDT ({tr.get('pnl_percent')}%)\n"
    )

def _nav_kb(idx: int, total: int) -> InlineKeyboardMarkup:
    prev_btn = InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"hist:{max(idx-1,0)}")
    next_btn = InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"hist:{min(idx+1,total-1)}")
    help_btn = InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="help")
    return InlineKeyboardMarkup(inline_keyboard=[[prev_btn, next_btn],[help_btn]])

async def start_control_bot(settings=None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç aiogram v3-–±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    –¢—Ä–µ–±—É—é—Ç—Å—è –≤ .env: TGBOT_TOKEN, TG_OWNER_ID.
    –ö–æ–º–∞–Ω–¥—ã: /start, /help, /history, /equity, /stats, /dryrun_on, /dryrun_off
    """
    if not TGBOT_TOKEN:
        print("[tg_control] TGBOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        return
    if not ALLOWED_USERS:
        print("[tg_control] TG_OWNER_IDS/TG_OWNER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã ‚Äî –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –Ω–æ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –≤—Å–µ—Ö.")

    from aiogram.client.default import DefaultBotProperties
    bot = Bot(TGBOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # debug toggle state
    _debug_state = {'core_signal_reader_debug': False}

    # === –•—Ä–∞–Ω–∏–ª–∏—â–µ runtime-–Ω–∞—Å—Ç—Ä–æ–µ–∫ (–º–∏–Ω–∏–º—É–º) ===
    # –ß–∏—Ç–∞–µ–º DRY_RUN –∏–∑ env –Ω–∞ —Å—Ç–∞—Ä—Ç–µ; –¥–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
    _state = {
        "DRY_RUN": os.getenv("DRY_RUN","true").lower()=="true",
        "EQUITY_USDT": float(os.getenv("EQUITY_USDT","0")),
        "SPLIT_SCALPING_PCT": float(os.getenv("SPLIT_SCALPING_PCT","15")),
        "SPLIT_INTRADAY_PCT": float(os.getenv("SPLIT_INTRADAY_PCT","85")),
    }

    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        if ALLOWED_USERS and message.from_user.id not in ALLOWED_USERS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä–æ–º.\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/history ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫ (–ª–∏—Å—Ç–∞–Ω–∏–µ)\n"
            "/equity ‚Äî —Ç–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ —Å–ø–ª–∏—Ç—ã 15%/85%\n"
            "/stats ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/dryrun_on /dryrun_off ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏\n"
            "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
        )

    @dp.message(Command("help"))
    async def cmd_help(message: Message):
        if ALLOWED_USERS and message.from_user.id not in ALLOWED_USERS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        users_info = f"–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(ALLOWED_USERS)}"
        await message.answer(
            "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
            "<b>/history</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫. –õ–∏—Å—Ç–∞–π ‚¨ÖÔ∏è‚û°Ô∏è.\n"
            "<b>/equity</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π EQUITY –∏ —Å–ø–ª–∏—Ç—ã 15% (—Å–∫–∞–ª—å–ø–∏–Ω–≥) / 85% (–∏–Ω—Ç—Ä–∞–¥–µ–π).\n"
            "<b>/stats</b> ‚Äî –±–∞–∑–æ–≤—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ (—Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–æ–≤, –æ—Ä–¥–µ—Ä–æ–≤ –∏ —Ç.–ø.).\n"
            "<b>/dryrun_on</b> / <b>/dryrun_off</b> ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é.\n"
            f"–î–æ—Å—Ç—É–ø: {users_info}"
        )

    @dp.message(Command("history"))
    async def cmd_history(message: Message):
        if ALLOWED_USERS and message.from_user.id not in ALLOWED_USERS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        trades = _load_demo_trades()[-10:]
        if not trades:
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return
        idx = 0
        await message.answer(_format_trade(trades[idx], idx, len(trades)), reply_markup=_nav_kb(idx, len(trades)))

    @dp.callback_query(F.data.startswith("hist:"))
    async def cb_history(cb: CallbackQuery):
        if ALLOWED_USERS and cb.from_user.id not in ALLOWED_USERS:
            await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        trades = _load_demo_trades()[-10:]
        if not trades:
            await cb.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", show_alert=True)
            return
        idx = int(cb.data.split(":")[1])
        idx = max(0, min(idx, len(trades)-1))
        await cb.message.edit_text(_format_trade(trades[idx], idx, len(trades)), reply_markup=_nav_kb(idx, len(trades)))

    @dp.callback_query(F.data == "help")
    async def cb_help(cb: CallbackQuery):
        if ALLOWED_USERS and cb.from_user.id not in ALLOWED_USERS:
            await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        await cb.answer()
        await cmd_help(cb.message)  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º

    @dp.message(Command("equity"))
    async def cmd_equity(message: Message):
        if ALLOWED_USERS and message.from_user.id not in ALLOWED_USERS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        eq = _state["EQUITY_USDT"]
        s15 = _state["SPLIT_SCALPING_PCT"]
        s85 = _state["SPLIT_INTRADAY_PCT"]
        await message.answer(
            f"üí∞ EQUITY: <b>{eq:.2f} USDT</b>\n"
            f"–°–∫–∞–ª—å–ø–∏–Ω–≥: {s15:.1f}% ‚Üí <b>{eq*s15/100:.2f} USDT</b>\n"
            f"–ò–Ω—Ç—Ä–∞–¥–µ–π: {s85:.1f}% ‚Üí <b>{eq*s85/100:.2f} USDT</b>"
        )

    @dp.message(Command("stats"))
    async def cmd_stats(message: Message):
        if ALLOWED_USERS and message.from_user.id not in ALLOWED_USERS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        # –ú–∏–Ω–∏-–≤–µ—Ä—Å–∏—è: —á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä demo_trades.json
        trades = _load_demo_trades()
        await message.answer(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–µ–º–æ):\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: <b>{len(trades)}</b>\n"
            f"DRY_RUN: <b>{'ON' if _state['DRY_RUN'] else 'OFF'}</b>"
        )

    @dp.message(Command("dryrun_on"))
    async def cmd_dryrun_on(message: Message):
        if ALLOWED_USERS and message.from_user.id not in ALLOWED_USERS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        _state["DRY_RUN"] = True
        await message.answer("‚úÖ DRY_RUN –≤–∫–ª—é—á—ë–Ω (—Å–∏–º—É–ª—è—Ü–∏—è).")

    @dp.message(Command("dryrun_off"))
    async def cmd_dryrun_off(message: Message):
        if ALLOWED_USERS and message.from_user.id not in ALLOWED_USERS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        _state["DRY_RUN"] = False
        await message.answer("‚ö†Ô∏è DRY_RUN –≤—ã–∫–ª—é—á–µ–Ω. –†–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ —è–¥—Ä–µ.")

    @dp.message(Command("debug"))
    async def cmd_debug(message: Message):
        # toggle core.signal_reader logger
        if ALLOWED_USERS and message.from_user.id not in ALLOWED_USERS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        import logging as _logging
        lg = _logging.getLogger('core.signal_reader')
        current = _debug_state['core_signal_reader_debug']
        if current:
            lg.setLevel(_logging.INFO)
            _debug_state['core_signal_reader_debug'] = False
            await message.answer('DEBUG=OFF')
        else:
            lg.setLevel(_logging.DEBUG)
            _debug_state['core_signal_reader_debug'] = True
            await message.answer('DEBUG=ON')

    print("[tg_control] Bot control starting (aiogram). Allowed users:", ALLOWED_USERS)
    await dp.start_polling(bot)
