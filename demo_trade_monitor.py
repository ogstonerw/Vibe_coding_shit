#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–º–æ-—Å–¥–µ–ª–æ–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å
"""

import json
import os
from datetime import datetime
from typing import List, Dict
from improved_signal_parser import TradingSignal

class DemoTradeMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –¥–µ–º–æ-—Å–¥–µ–ª–æ–∫"""
    
    def __init__(self):
        self.signals_file = 'signals_history.json'
        self.demo_trades_file = 'demo_trades.json'
        self.signals = []
        self.demo_trades = []
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–∏–≥–Ω–∞–ª–∞—Ö –∏ –¥–µ–º–æ-—Å–¥–µ–ª–∫–∞—Ö"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        if os.path.exists(self.signals_file):
            with open(self.signals_file, 'r', encoding='utf-8') as file:
                data = json.load(file)
                for item in data:
                    signal = TradingSignal(
                        message_id=item['message_id'],
                        channel_name=item['channel_name'],
                        position_type=item['position_type'],
                        entry_price=item.get('entry_price'),
                        stop_loss=item.get('stop_loss'),
                        take_profits=item.get('take_profits', []),
                        risk_percent=item.get('risk_percent'),
                        leverage=item.get('leverage'),
                        timestamp=item.get('timestamp'),
                        raw_text=item.get('raw_text', '')
                    )
                    self.signals.append(signal)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏
        if os.path.exists(self.demo_trades_file):
            with open(self.demo_trades_file, 'r', encoding='utf-8') as file:
                self.demo_trades = json.load(file)
    
    def create_demo_trade(self, signal: TradingSignal) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-—Å–¥–µ–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–∞"""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
        current_price = 45000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        risk_amount = 0.5  # 0.5% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
        account_balance = 1000  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å
        risk_usdt = account_balance * (risk_amount / 100)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        if signal.stop_loss and signal.entry_price:
            entry_price = float(signal.entry_price.split('-')[0])
            stop_price = float(signal.stop_loss)
            price_diff = abs(entry_price - stop_price)
            position_size = (risk_usdt / price_diff) * entry_price
        else:
            position_size = 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        
        demo_trade = {
            'trade_id': f"demo_{signal.message_id}",
            'signal_id': signal.message_id,
            'channel': signal.channel_name,
            'symbol': 'BTCUSDT',
            'side': signal.position_type,
            'entry_price': signal.entry_price,
            'current_price': current_price,
            'stop_loss': signal.stop_loss,
            'take_profit': signal.take_profits[0] if signal.take_profits else None,
            'position_size': round(position_size, 6),
            'leverage': signal.leverage,
            'risk_percent': signal.risk_percent,
            'status': 'OPEN',
            'open_time': signal.timestamp,
            'pnl': 0.0,
            'pnl_percent': 0.0,
            'raw_signal': signal.raw_text[:100] + "..."
        }
        
        return demo_trade
    
    def update_demo_trades(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal in self.signals:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–µ–º–æ-—Å–¥–µ–ª–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            existing_trade = next(
                (trade for trade in self.demo_trades if trade['signal_id'] == signal.message_id),
                None
            )
            
            if not existing_trade:
                demo_trade = self.create_demo_trade(signal)
                self.demo_trades.append(demo_trade)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏
        with open(self.demo_trades_file, 'w', encoding='utf-8') as file:
            json.dump(self.demo_trades, file, ensure_ascii=False, indent=2)
    
    def calculate_pnl(self, trade: Dict) -> tuple:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç P&L –¥–ª—è —Å–¥–µ–ª–∫–∏"""
        if not trade['entry_price'] or not trade['current_price']:
            return 0.0, 0.0
        
        entry_price = float(trade['entry_price'].split('-')[0])
        current_price = trade['current_price']
        position_size = trade['position_size']
        
        if trade['side'] == 'LONG':
            pnl = (current_price - entry_price) * position_size
        else:  # SHORT
            pnl = (entry_price - current_price) * position_size
        
        pnl_percent = (pnl / (entry_price * position_size)) * 100
        
        return round(pnl, 2), round(pnl_percent, 2)
    
    def show_demo_trades(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏"""
        print("üìä –î–ï–ú–û-–°–î–ï–õ–ö–ò")
        print("=" * 80)
        
        if not self.demo_trades:
            print("‚ùå –ù–µ—Ç –¥–µ–º–æ-—Å–¥–µ–ª–æ–∫")
            return
        
        total_pnl = 0.0
        open_trades = 0
        
        for i, trade in enumerate(self.demo_trades, 1):
            # –û–±–Ω–æ–≤–ª—è–µ–º P&L
            pnl, pnl_percent = self.calculate_pnl(trade)
            trade['pnl'] = pnl
            trade['pnl_percent'] = pnl_percent
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if trade['stop_loss'] and trade['current_price']:
                stop_price = float(trade['stop_loss'])
                if (trade['side'] == 'LONG' and trade['current_price'] <= stop_price) or \
                   (trade['side'] == 'SHORT' and trade['current_price'] >= stop_price):
                    trade['status'] = 'STOPPED'
            
            if trade['take_profit'] and trade['current_price']:
                tp_price = float(trade['take_profit'])
                if (trade['side'] == 'LONG' and trade['current_price'] >= tp_price) or \
                   (trade['side'] == 'SHORT' and trade['current_price'] <= tp_price):
                    trade['status'] = 'TAKE_PROFIT'
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
            status_emoji = {
                'OPEN': 'üü¢',
                'STOPPED': 'üî¥',
                'TAKE_PROFIT': 'üü°'
            }.get(trade['status'], '‚ö™')
            
            pnl_emoji = 'üìà' if pnl >= 0 else 'üìâ'
            
            print(f"\n{i}. {status_emoji} {trade['side']} {trade['symbol']}")
            print(f"   ID: {trade['trade_id']}")
            print(f"   –ö–∞–Ω–∞–ª: {trade['channel']}")
            print(f"   –í—Ö–æ–¥: {trade['entry_price']}")
            print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {trade['current_price']}")
            print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: {trade['stop_loss']}")
            print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {trade['take_profit']}")
            print(f"   –†–∞–∑–º–µ—Ä: {trade['position_size']} BTC")
            print(f"   –ü–ª–µ—á–æ: {trade['leverage']}")
            print(f"   P&L: {pnl_emoji} {pnl} USDT ({pnl_percent}%)")
            print(f"   –°—Ç–∞—Ç—É—Å: {trade['status']}")
            print(f"   –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è: {trade['open_time']}")
            print("-" * 60)
            
            if trade['status'] == 'OPEN':
                open_trades += 1
                total_pnl += pnl
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(self.demo_trades)}")
        print(f"   –û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: {open_trades}")
        print(f"   –ó–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: {len(self.demo_trades) - open_trades}")
        print(f"   –û–±—â–∏–π P&L: {'üìà' if total_pnl >= 0 else 'üìâ'} {total_pnl} USDT")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(self.demo_trades_file, 'w', encoding='utf-8') as file:
            json.dump(self.demo_trades, file, ensure_ascii=False, indent=2)
    
    def show_signals_summary(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º"""
        print(f"\nüìã –°–í–û–î–ö–ê –ü–û –°–ò–ì–ù–ê–õ–ê–ú:")
        print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(self.signals)}")
        
        if self.signals:
            long_signals = len([s for s in self.signals if s.position_type == 'LONG'])
            short_signals = len([s for s in self.signals if s.position_type == 'SHORT'])
            
            print(f"   LONG: {long_signals}")
            print(f"   SHORT: {short_signals}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
            channels = {}
            for signal in self.signals:
                if signal.channel_name not in channels:
                    channels[signal.channel_name] = {'long': 0, 'short': 0}
                
                if signal.position_type == 'LONG':
                    channels[signal.channel_name]['long'] += 1
                else:
                    channels[signal.channel_name]['short'] += 1
            
            print(f"\nüì° –ü–æ –∫–∞–Ω–∞–ª–∞–º:")
            for channel, stats in channels.items():
                total = stats['long'] + stats['short']
                print(f"   {channel}: {total} —Å–∏–≥–Ω–∞–ª–æ–≤ (LONG: {stats['long']}, SHORT: {stats['short']})")
    
    def run_monitor(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print("üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –î–ï–ú–û-–°–î–ï–õ–û–ö")
        print("=" * 80)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_data()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏
        self.update_demo_trades()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
        self.show_signals_summary()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏
        self.show_demo_trades()
        
        print(f"\nüí° –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.demo_trades_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = DemoTradeMonitor()
    monitor.run_monitor()

if __name__ == "__main__":
    main()
