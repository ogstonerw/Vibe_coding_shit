import re
from typing import Dict, Any, Optional, Tuple
from dataclasses import dataclass

@dataclass
class ParsedSignal:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–∞"""
    direction: str  # BUY | SELL
    symbol: str     # BTCUSDT
    entry_low: float
    entry_high: float
    stop_loss: float
    take_profit: Optional[float] = None
    take_profit2: Optional[float] = None
    risk_percent: Optional[float] = None
    leverage: Optional[int] = None
    confidence: float = 0.0  # 0.0 - 1.0

class SignalParser:
    """–ü–∞—Ä—Å–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.buy_patterns = [
            r'\b(?:buy|long|–ø–æ–∫—É–ø–∫–∞|–ª–æ–Ω–≥|–≤–≤–µ—Ä—Ö|up|bull)\b',
            r'üü¢|‚úÖ|üìà|üöÄ|üíö',
            r'\+|üìä|üìà'
        ]
        
        self.sell_patterns = [
            r'\b(?:sell|short|–ø—Ä–æ–¥–∞–∂–∞|—à–æ—Ä—Ç|–≤–Ω–∏–∑|down|bear)\b',
            r'üî¥|‚ùå|üìâ|üí•|‚ù§Ô∏è',
            r'\-|üìä|üìâ'
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ü–µ–Ω
        self.price_patterns = [
            r'(\d+(?:\.\d+)?)\s*(?:usdt|usd|\$)?',  # –û–±—ã—á–Ω—ã–µ —Ü–µ–Ω—ã
            r'(\d+(?:\.\d+)?)k',  # –¢—ã—Å—è—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 45k = 45000)
            r'(\d+(?:\.\d+)?)m',  # –ú–∏–ª–ª–∏–æ–Ω—ã
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–æ–Ω –≤—Ö–æ–¥–∞
        self.entry_patterns = [
            r'(?:entry|–≤—Ö–æ–¥|–∑–æ–Ω–∞|zone)\s*(?:–≤|at|from|to)?\s*(\d+(?:\.\d+)?)\s*(?:-|to|–¥–æ)\s*(\d+(?:\.\d+)?)',
            r'(\d+(?:\.\d+)?)\s*(?:-|to|–¥–æ)\s*(\d+(?:\.\d+)?)\s*(?:entry|–≤—Ö–æ–¥)',
            r'buy\s*(?:at|–≤|from)\s*(\d+(?:\.\d+)?)\s*(?:-|to|–¥–æ)\s*(\d+(?:\.\d+)?)',
            r'sell\s*(?:at|–≤|from)\s*(\d+(?:\.\d+)?)\s*(?:-|to|–¥–æ)\s*(\d+(?:\.\d+)?)',
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        self.sl_patterns = [
            r'(?:sl|stop|—Å—Ç–æ–ø|stop\s*loss)\s*(?:at|–≤|:)?\s*(\d+(?:\.\d+)?)',
            r'(\d+(?:\.\d+)?)\s*(?:sl|stop|—Å—Ç–æ–ø)',
            r'stop\s*loss\s*(\d+(?:\.\d+)?)',
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        self.tp_patterns = [
            r'(?:tp|target|—Ç–µ–π–∫|take\s*profit)\s*(?:at|–≤|:)?\s*(\d+(?:\.\d+)?)',
            r'(\d+(?:\.\d+)?)\s*(?:tp|target|—Ç–µ–π–∫)',
            r'take\s*profit\s*(\d+(?:\.\d+)?)',
            r'target\s*(\d+(?:\.\d+)?)',
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∏—Å–∫–∞
        self.risk_patterns = [
            r'(?:risk|—Ä–∏—Å–∫)\s*(?:=|\:)?\s*(\d+(?:\.\d+)?)\s*%',
            r'(\d+(?:\.\d+)?)\s*%\s*(?:risk|—Ä–∏—Å–∫)',
            r'r\s*(\d+(?:\.\d+)?)',
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–ª–µ—á–∞
        self.leverage_patterns = [
            r'(?:lev|leverage|–ø–ª–µ—á–æ)\s*(?:=|\:)?\s*(\d+)x',
            r'(\d+)x\s*(?:lev|leverage|–ø–ª–µ—á–æ)',
            r'(\d+)\s*leverage',
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤
        self.symbol_patterns = [
            r'\b(btc|bitcoin|–±–∏—Ç–∫–æ–∏–Ω)\b',
            r'\b(eth|ethereum|—ç—Ñ–∏—Ä)\b',
            r'\b(sol|solana)\b',
            r'\b(ada|cardano)\b',
            r'\b(dot|polkadot)\b',
        ]

    def parse(self, text: str) -> Optional[ParsedSignal]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        text_lower = text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        direction = self._parse_direction(text_lower)
        if not direction:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª
        symbol = self._parse_symbol(text_lower)
        if not symbol:
            symbol = "BTCUSDT"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—ã
        entry_low, entry_high = self._parse_entry_zone(text_lower)
        stop_loss = self._parse_stop_loss(text_lower)
        take_profit = self._parse_take_profit(text_lower)
        take_profit2 = self._parse_take_profit2(text_lower)
        
        # –ü–∞—Ä—Å–∏–º —Ä–∏—Å–∫ –∏ –ø–ª–µ—á–æ
        risk_percent = self._parse_risk(text_lower)
        leverage = self._parse_leverage(text_lower)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = self._calculate_confidence(
            text_lower, direction, entry_low, entry_high, stop_loss
        )
        
        if confidence < 0.3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            return None
            
        return ParsedSignal(
            direction=direction,
            symbol=symbol,
            entry_low=entry_low,
            entry_high=entry_high,
            stop_loss=stop_loss,
            take_profit=take_profit,
            take_profit2=take_profit2,
            risk_percent=risk_percent,
            leverage=leverage,
            confidence=confidence
        )

    def _parse_direction(self, text: str) -> Optional[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        buy_score = 0
        sell_score = 0
        
        for pattern in self.buy_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                buy_score += 1
        
        for pattern in self.sell_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                sell_score += 1
        
        if buy_score > sell_score:
            return "BUY"
        elif sell_score > buy_score:
            return "SELL"
        return None

    def _parse_symbol(self, text: str) -> Optional[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–º–≤–æ–ª–∞"""
        symbol_map = {
            'btc': 'BTCUSDT',
            'bitcoin': 'BTCUSDT',
            '–±–∏—Ç–∫–æ–∏–Ω': 'BTCUSDT',
            'eth': 'ETHUSDT',
            'ethereum': 'ETHUSDT',
            '—ç—Ñ–∏—Ä': 'ETHUSDT',
            'sol': 'SOLUSDT',
            'solana': 'SOLUSDT',
            'ada': 'ADAUSDT',
            'cardano': 'ADAUSDT',
            'dot': 'DOTUSDT',
            'polkadot': 'DOTUSDT',
        }
        
        for pattern, symbol in symbol_map.items():
            if re.search(rf'\b{pattern}\b', text, re.IGNORECASE):
                return symbol
        return None

    def _parse_entry_zone(self, text: str) -> Tuple[float, float]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–æ–Ω—ã –≤—Ö–æ–¥–∞"""
        for pattern in self.entry_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                low = float(match.group(1))
                high = float(match.group(2))
                return low, high
        
        # –ï—Å–ª–∏ –∑–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
        prices = self._extract_prices(text)
        if len(prices) >= 2:
            return min(prices[:2]), max(prices[:2])
        
        return 0.0, 0.0

    def _parse_stop_loss(self, text: str) -> float:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
        for pattern in self.sl_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return float(match.group(1))
        return 0.0

    def _parse_take_profit(self, text: str) -> Optional[float]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
        for pattern in self.tp_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return float(match.group(1))
        return None

    def _parse_take_profit2(self, text: str) -> Optional[float]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
        # –ò—â–µ–º –≤—Ç–æ—Ä–æ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (–æ–±—ã—á–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ tp2 –∏–ª–∏ target2)
        tp2_patterns = [
            r'tp2\s*(?:at|–≤|:)?\s*(\d+(?:\.\d+)?)',
            r'target2\s*(?:at|–≤|:)?\s*(\d+(?:\.\d+)?)',
            r'(\d+(?:\.\d+)?)\s*tp2',
        ]
        
        for pattern in tp2_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return float(match.group(1))
        return None

    def _parse_risk(self, text: str) -> Optional[float]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–∏—Å–∫–∞"""
        for pattern in self.risk_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return float(match.group(1))
        return None

    def _parse_leverage(self, text: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø–ª–µ—á–∞"""
        for pattern in self.leverage_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return int(match.group(1))
        return None

    def _extract_prices(self, text: str) -> list:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        prices = []
        for pattern in self.price_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            for match in matches:
                try:
                    price = float(match)
                    if price > 0:
                        prices.append(price)
                except ValueError:
                    continue
        return sorted(prices)

    def _calculate_confidence(self, text: str, direction: str, 
                            entry_low: float, entry_high: float, 
                            stop_loss: float) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ"""
        confidence = 0.0
        
        # –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã
        if direction:
            confidence += 0.3
        
        if entry_low > 0 and entry_high > 0:
            confidence += 0.3
        
        if stop_loss > 0:
            confidence += 0.2
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if re.search(r'\b(entry|–≤—Ö–æ–¥|–∑–æ–Ω–∞|zone)\b', text, re.IGNORECASE):
            confidence += 0.1
        
        if re.search(r'\b(sl|stop|—Å—Ç–æ–ø)\b', text, re.IGNORECASE):
            confidence += 0.1
        
        return min(confidence, 1.0)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
parser = SignalParser()
