#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import os
import sys

from datetime import datetime
from typing import Optional, Dict

from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.tl.types import Channel

from improved_signal_parser import ImprovedSignalParser, TradingSignal
from bitget_integration import BitgetTrader, load_bitget_config
from trader.executor import Executor
from market.watcher import Watcher
from bot.tg_control import start_control_bot

# 1) –ó–∞–≥—Ä—É–∂–∞–µ–º .env (–ù–ï data.env)
load_dotenv()

# 2) –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
TG_SESSION = os.getenv('TG_SESSION', 'signal_trader')
PHONE = os.getenv('PHONE') or os.getenv('TG_PHONE')

# –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: –ª–∏–±–æ —Å—Å—ã–ª–∫–∞, –ª–∏–±–æ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
SCALPING_LINK = os.getenv('TG_SOURCE_SCALPING_LINK') or ""
SCALPING_NAME = os.getenv('TG_SOURCE_SCALPING_NAME') or ""
INTRADAY_LINK = os.getenv('TG_SOURCE_INTRADAY_LINK') or ""
INTRADAY_NAME = os.getenv('TG_SOURCE_INTRADAY_NAME') or ""

# –†–∏—Å–∫ –∏ –ª–æ–≥–∏–∫–∞
DRY_RUN = (os.getenv('DRY_RUN', 'true').lower() == 'true')
EQUITY_USDT = float(os.getenv('EQUITY_USDT', '0'))
SPLIT_SCALPING_PCT = float(os.getenv('SPLIT_SCALPING_PCT', '15'))
SPLIT_INTRADAY_PCT = float(os.getenv('SPLIT_INTRADAY_PCT', '85'))
RISK_TOTAL_CAP_PCT = float(os.getenv('RISK_TOTAL_CAP_PCT', '3.0'))
RISK_LEG_PCT = float(os.getenv('RISK_LEG_PCT', '1.5'))
LEVERAGE_MIN = int(os.getenv('LEVERAGE_MIN', '10'))
LEVERAGE_MAX = int(os.getenv('LEVERAGE_MAX', '25'))
BREAKEVEN_AFTER_TP = int(os.getenv('BREAKEVEN_AFTER_TP', '2'))
TIME_STOP_MIN = int(os.getenv('TIME_STOP_MIN', '240'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
try:
    if hasattr(sys.stdout, 'reconfigure'):
        sys.stdout.reconfigure(encoding='utf-8')
    os.environ.setdefault('PYTHONIOENCODING', 'utf-8')
except Exception:
    pass


class ImprovedTradingBot:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å –æ–±—É—á–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º"""

    def __init__(self):
        self.client: Optional[TelegramClient] = None
        self.parser = ImprovedSignalParser()
        self.bitget_trader: Optional[BitgetTrader] = None
        self.signal_manager = SignalManager()
        self.channel_entities: Dict[str, Channel] = {}
        self.channel_source_by_id: Dict[int, str] = {}  # channel.id -> SCALPING|INTRADAY
        self.phone = PHONE
        self.watcher: Optional[Watcher] = None
        self._synthetic_price = None  # –¥–ª—è DRY_RUN —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π ¬´—Ç–∏–∫¬ª

        self.stats = {
            'signals_processed': 0,
            'signals_executed': 0,
            'total_profit': 0.0,
            'start_time': datetime.now()
        }

    async def initialize(self):
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

        # 3) –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º —Å–µ—Å—Å–∏–∏ –∏–∑ .env (—É—Å—Ç–æ–π—á–∏–≤—ã–π –ª–æ–≥–∏–Ω)
        self.client = TelegramClient(TG_SESSION, API_ID, API_HASH)
        await self.client.connect()

        if not await self.client.is_user_authorized():
            if not self.phone:
                try:
                    self.phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ Telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567: ").strip()
                except Exception:
                    self.phone = None
            # start —Å–æ—Ö—Ä–∞–Ω–∏—Ç .session ‚Üí –¥–∞–ª–µ–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–æ–¥–æ–≤
            await self.client.start(phone=self.phone)

        print("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # Bitget —Ç—Ä–µ–π–¥–µ—Ä
        if not DRY_RUN:
            try:
                config = load_bitget_config()
                if config:
                    self.bitget_trader = BitgetTrader(config)
                    print("‚úÖ Bitget —Ç—Ä–µ–π–¥–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
                else:
                    print("‚ö†Ô∏è Bitget –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitget: {e}")
        else:
            print("üîß –†–µ–∂–∏–º DRY_RUN - —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")

        # —Å–æ–∑–¥–∞—ë–º watcher (–ø–µ—Ä–µ–≤–æ–¥ SL –≤ –ë–£ –ø–æ—Å–ª–µ TP2)
        def on_breakeven(plan: dict):
            side = plan["side"]
            entry = plan["entry"]
            be = entry + 1.0 if side == "SHORT" else entry - 1.0  # –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä –≤ 1$
            print(f"üîÅ –ü–µ—Ä–µ–Ω–æ—Å SL ‚Üí –ë–£ –Ω–∞ {be} –ø–æ –ø–ª–∞–Ω—É {plan.get('plan_id')}")
            if not DRY_RUN and self.bitget_trader:
                try:
                    self.bitget_trader.modify_stop(plan["side"], new_stop_price=be)
                    print(f"‚úÖ SL –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –ë–£ –Ω–∞ {be}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ SL –≤ –ë–£: {e}")

        self.watcher = Watcher(get_now_price=self._get_now_price, on_breakeven=on_breakeven, poll_interval_sec=3)
        # –∑–∞–ø—É—Å–∫–∞–µ–º watcher –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self.watcher.start())

        self.signal_manager.load_signals()

        # 4) –†–µ–∑–æ–ª–≤ –¥–≤—É—Ö –∫–∞–Ω–∞–ª–æ–≤ (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ: –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é)
        await self._resolve_channels()

        print("üéâ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    def _get_now_price(self) -> float:
        # DRY_RUN: —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫ TP
        if DRY_RUN:
            if self._synthetic_price is None:
                # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ ‚Äî —Å—Ä–µ–¥–Ω–∏–π entry –∏–ª–∏ 30000
                self._synthetic_price = 30000.0
            # –¥–≤–∏–≥–∞–µ–º —Ü–µ–Ω—É –Ω–∞ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ):
            self._synthetic_price += 50.0  # –¥–ª—è LONG —Ä–∞—Å—Ç—ë—Ç; –¥–ª—è SHORT –º–æ–∂–Ω–æ —É–±—ã–≤–∞—Ç—å ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
            return self._synthetic_price
        # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –º–æ–∂–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–µ—Ä–Ω—ë–º entry –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞, –µ—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—ã
        return self._synthetic_price or 30000.0

    async def _resolve_by_link_or_name(self, link: str, name_substr: str) -> Optional[Channel]:
        # 4.1 —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Å—ã–ª–∫—É (invite)
        if link:
            try:
                ent = await self.client.get_entity(link)
                if isinstance(ent, Channel):
                    return ent
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ {link}: {e}")
        # 4.2 –∑–∞—Ç–µ–º –∏—â–µ–º –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ä–µ–¥–∏ —Ç–≤–æ–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        if name_substr:
            async for dialog in self.client.iter_dialogs():
                if isinstance(dialog.entity, Channel):
                    if name_substr.lower() in (dialog.name or "").lower():
                        return dialog.entity
        return None

    async def _resolve_channels(self):
        print("üì° –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤...")

        scalping = await self._resolve_by_link_or_name(SCALPING_LINK, SCALPING_NAME)
        intraday = await self._resolve_by_link_or_name(INTRADAY_LINK, INTRADAY_NAME)

        if not scalping:
            raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω SCALPING-–∫–∞–Ω–∞–ª (–ø—Ä–æ–≤–µ—Ä—å TG_SOURCE_SCALPING_LINK –∏–ª–∏ TG_SOURCE_SCALPING_NAME)")
        if not intraday:
            raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω INTRADAY-–∫–∞–Ω–∞–ª (–ø—Ä–æ–≤–µ—Ä—å TG_SOURCE_INTRADAY_LINK –∏–ª–∏ TG_SOURCE_INTRADAY_NAME)")

        self.channel_entities["SCALPING"] = scalping
        self.channel_entities["INTRADAY"] = intraday
        self.channel_source_by_id[scalping.id] = "SCALPING"
        self.channel_source_by_id[intraday.id] = "INTRADAY"

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω SCALPING: id={scalping.id}, title={scalping.title}")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω INTRADAY: id={intraday.id}, title={intraday.title}")

    def setup_message_handlers(self):
        targets = list(self.channel_entities.values())

        @self.client.on(events.NewMessage(chats=targets))
        async def handle_new_message(event):
            await self._process_message(event)

    async def _process_message(self, event):
        try:
            message = event.message
            channel = await event.get_chat()
            channel_name = getattr(channel, 'title', str(channel.id))
            source = self.channel_source_by_id.get(channel.id, "INTRADAY")  # –¥–µ—Ñ–æ–ª—Ç –ø—É—Å—Ç—å –±—É–¥–µ—Ç –∏–Ω—Ç—Ä–∞–¥–µ–π

            text = message.text or ""
            if not text.strip():
                return

            # 5) —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ-—Å–∏–≥–Ω–∞–ª—ã ‚Äî –ø—É—Å—Ç—å —Ä–µ—à–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            if not self.parser.is_trading_signal(text):
                return

            print(f"\nüéØ –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª [{source}] –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_name}:")
            print(f"   –¢–µ–∫—Å—Ç: {text[:120].replace(os.linesep,' ')}{'...' if len(text)>120 else ''}")

            # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª
            signal = self.parser.parse_signal(
                message_id=str(message.id),
                channel_name=channel_name,
                text=text,
                timestamp=message.date.isoformat()
            )
            if not signal:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
                return

            # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–æ—Å—Ç–∞–≤–∏–º source –≤–Ω—É—Ç—Ä—å —Å–∏–≥–Ω–∞–ª–∞, –µ—Å–ª–∏ —É —Ç–≤–æ–µ–≥–æ dataclass –µ—Å—Ç—å —Ç–∞–∫–æ–µ –ø–æ–ª–µ
            if hasattr(signal, "source"):
                setattr(signal, "source", source)

            self._print_signal_info(signal)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            self.signal_manager.add_signal(signal)

            # 6) –í—ã–ø–æ–ª–Ω—è–µ–º (—Å —É—á—ë—Ç–æ–º –¥–µ–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞)
            await self._execute_signal(signal, source)

            self.stats['signals_processed'] += 1

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def _print_signal_info(self, signal: TradingSignal):
        print("   üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–∞:")
        print(f"      –¢–∏–ø: {signal.position_type}")
        print(f"      –í—Ö–æ–¥: {signal.entry_price}")
        print(f"      –°—Ç–æ–ø: {signal.stop_loss}")
        tps = getattr(signal, 'take_profits', []) or []
        print(f"      –¶–µ–ª–∏: {tps[:3] if tps else '–ù–µ—Ç'}{'...' if len(tps)>3 else ''}")
        print(f"      –†–∏—Å–∫: {getattr(signal, 'risk_percent', None)}")
        print(f"      –ü–ª–µ—á–æ: {getattr(signal, 'leverage', None)}")

    async def _execute_signal(self, signal: TradingSignal, source: str):
        print("   üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞...")

        # 1) –¥–µ–ª–∏–º –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ –ø–æ–¥–¥–µ–ø–æ–∑–∏—Ç—ã
        equity_total = EQUITY_USDT
        if source == "SCALPING":
            equity_sub = equity_total * SPLIT_SCALPING_PCT / 100.0
        else:
            equity_sub = equity_total * SPLIT_INTRADAY_PCT / 100.0

        # 2) DRY_RUN —Ä–µ–∂–∏–º: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –∏ —Å–æ–∑–¥–∞—ë–º –¥–µ–º–æ-—Å–¥–µ–ª–∫—É
        if DRY_RUN:
            execu = Executor(self.bitget_trader, dry_run=True)
            plan = execu.plan_from_signal(signal, context={
                "source": source,
                "equity_sub": equity_sub,
                "risk_total_pct": RISK_TOTAL_CAP_PCT,
                "risk_leg_pct": RISK_LEG_PCT,
                "leverage_min": LEVERAGE_MIN,
                "breakeven_after_tp": BREAKEVEN_AFTER_TP
            })
            orders, plan_dict = execu.place_all(plan)
            print("   ‚úÖ DRY_RUN: –ø–ª–∞–Ω —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –∏ –æ—Ä–¥–µ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω—ã")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –≤ watcher
            if self.watcher:
                self.watcher.register_plan(plan_dict)
            
            self._save_demo_trade(signal)
            return

        # 3) –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
        if not self.bitget_trader:
            print("   ‚ùå Bitget —Ç—Ä–µ–π–¥–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è qty_total –∏ tp_shares
            execu = Executor(self.bitget_trader, dry_run=False)
            plan = execu.plan_from_signal(signal, context={
                "source": source,
                "equity_sub": equity_sub,
                "risk_total_pct": RISK_TOTAL_CAP_PCT,
                "risk_leg_pct": RISK_LEG_PCT,
                "leverage_min": LEVERAGE_MIN,
                "breakeven_after_tp": BREAKEVEN_AFTER_TP
            })
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ execute_trade
            ctx = {
                "source": source,
                "equity_sub": equity_sub,
                "risk_total_pct": RISK_TOTAL_CAP_PCT,
                "risk_leg_pct": RISK_LEG_PCT,
                "leverage_min": LEVERAGE_MIN,
                "leverage_max": LEVERAGE_MAX,
                "breakeven_after_tp": BREAKEVEN_AFTER_TP,
                "qty_total": plan.leg1.qty + (plan.leg2.qty if plan.leg2 else 0.0),
                "tp_shares": plan.tp_shares,
            }
            
            result = self.bitget_trader.execute_trade(signal, context=ctx)
            
            if result:
                print("   ‚úÖ –û—Ä–¥–µ—Ä(–∞) —Ä–∞–∑–º–µ—â–µ–Ω—ã")
                self.stats['signals_executed'] += 1
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –≤ watcher –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
                if self.watcher:
                    plan_dict = {
                        'symbol': plan.symbol,
                        'side': plan.side,
                        'entry': plan.entry_price,
                        'stop': plan.sl_price,
                        'tps': plan.tp_levels,
                        'tp_shares': plan.tp_shares,
                        'breakeven_after_tp': plan.move_sl_to_be_after_tp,
                        'plan_id': getattr(plan, 'plan_id', None),
                        'qty_total': plan.leg1.qty + (plan.leg2.qty if plan.leg2 else 0.0)
                    }
                    self.watcher.register_plan(plan_dict)
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")

    def _save_demo_trade(self, signal: TradingSignal):
        try:
            demo_trade = {
                'trade_id': f"demo_{signal.message_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                'signal_id': signal.message_id,
                'channel': signal.channel_name,
                'symbol': 'BTCUSDT',
                'side': signal.position_type,
                'entry_price': signal.entry_price,
                'stop_loss': signal.stop_loss,
                'take_profit': (signal.take_profits or [None])[0],
                'position_size': None,  # —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å—á–∏—Ç–∞–µ—Ç risk-–º–µ–Ω–µ–¥–∂–µ—Ä (–∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∏–º)
                'leverage': getattr(signal, 'leverage', None),
                'risk_percent': getattr(signal, 'risk_percent', None),
                'status': 'OPEN',
                'open_time': signal.timestamp,
                'pnl': 0.0,
                'pnl_percent': 0.0,
                'raw_signal': (signal.raw_text or '')[:200] + "..."
            }

            demo_trades = []
            if os.path.exists('demo_trades.json'):
                with open('demo_trades.json', 'r', encoding='utf-8') as f:
                    demo_trades = json.load(f)

            demo_trades.append(demo_trade)

            with open('demo_trades.json', 'w', encoding='utf-8') as f:
                json.dump(demo_trades, f, ensure_ascii=False, indent=2)

            print(f"   üìÅ –î–µ–º–æ-—Å–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {demo_trade['trade_id']}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏: {e}")

    def show_statistics(self):
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:")
        print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now() - self.stats['start_time']}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.stats['signals_processed']}")
        print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {self.stats['signals_executed']}")
        print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {self.stats['total_profit']:.2f} USDT")

    async def run(self):
        try:
            await self.initialize()
            self.setup_message_handlers()

            print("\nüéØ –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã:")
            for k, v in self.channel_entities.items():
                print(f"   - {k}: {getattr(v, 'title', v.id)}")

            print(f"\nüí° –†–µ–∂–∏–º: {'DRY_RUN (—Å–∏–º—É–ª—è—Ü–∏—è)' if DRY_RUN else '–†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø'}")
            print("   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∫–æ—Ä—É—Ç–∏–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [
                self.client.run_until_disconnected(),   # Telethon listener
                start_control_bot()                     # aiogram control bot
            ]
            await asyncio.gather(*tasks)

        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            self.show_statistics()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            if self.client:
                await self.client.disconnect()


class SignalManager:
    def __init__(self, filename: str = 'signals_history.json'):
        self.filename = filename
        self.signals: list[TradingSignal] = []

    def load_signals(self):
        try:
            if os.path.exists(self.filename):
                with open(self.filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                for item in data:
                    self.signals.append(TradingSignal(
                        message_id=item['message_id'],
                        channel_name=item['channel_name'],
                        position_type=item['position_type'],
                        entry_price=item.get('entry_price'),
                        stop_loss=item.get('stop_loss'),
                        take_profits=item.get('take_profits', []),
                        risk_percent=item.get('risk_percent'),
                        leverage=item.get('leverage'),
                        timestamp=item.get('timestamp'),
                        raw_text=item.get('raw_text', '')
                    ))
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    def add_signal(self, signal: TradingSignal):
        for s in self.signals:
            if s.message_id == signal.message_id and s.channel_name == signal.channel_name:
                return False
        self.signals.append(signal)
        self.save_signals()
        return True

    def save_signals(self):
        try:
            data = []
            for s in self.signals:
                data.append({
                    'message_id': s.message_id,
                    'channel_name': s.channel_name,
                    'position_type': s.position_type,
                    'entry_price': s.entry_price,
                    'stop_loss': s.stop_loss,
                    'take_profits': s.take_profits,
                    'risk_percent': s.risk_percent,
                    'leverage': s.leverage,
                    'timestamp': s.timestamp,
                    'raw_text': s.raw_text
                })
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")


async def main():
    print("ü§ñ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")
    print("=" * 60)
    bot = ImprovedTradingBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
